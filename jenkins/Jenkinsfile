pipeline {
agent {
      label 'nodejs8'
  }
stages
  {
  stage ('install modules'){
   steps {
    sh '''
      npm install --verbose -d 
      npm install --save classlist.js
    '''
  }
 }
  stage ('Build App') {
  steps {
    sh '$(npm bin)/ng build --prod --build-optimizer'
  }
 }
  stage ('build files copy') {
   steps {
    sh 'cp nginx/status.conf dist/nginx-cfg'
  }
 } 
  
    
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.selector("bc", "angular-5-april").startBuild("--from-dir=dist", "--wait")
          }
        }
      }
    }
   
   
    stage('Create DEV') {
      steps {
        script {
          openshift.withCluster() {
    openshift.withProject() {
        def app = openshift.newApp('image-registry.openshift-image-registry.svc:5000/digitalrig/angular-5-april')
        def dcpatch = [
               "metadata":[
                   "name":"angular-5-april-deployment",
                   "namespace":"digitalrig"
            ],
               "apiVersion":"apps/v1",
               "kind":"Deployment",
               "spec":[
                   "template":[
                       "metadata":[:],
                       "spec":[
                           "containers":[
                                 ["image":"image-registry.openshift-image-registry.svc:5000/digitalrig/angular-5-april",
                                  "name":"angular",
                                  "resources":[:],
                                  "ports":[
                                       ["name":"jolokia",
                                        "containerPort":8080,
                                        "protocol":"TCP"
                                        ]
                                       ]
                                  ]
                           ],
                           "securityContext":[:],
                       ]
                   ]
                   ]
               ]
    
        openshift.apply(dcpatch)
        
    }
}
        }
      }
    }
  
}
}
