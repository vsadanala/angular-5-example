pipeline {
agent {
      label 'nodejs8'
  }
stages
  {
  stage ('install modules'){
   steps {
    sh '''
      npm install --verbose -d 
      npm install --save classlist.js
    '''
  }
 }
  stage ('Build App') {
  steps {
    sh '$(npm bin)/ng build --prod --build-optimizer'
  }
 }
  stage ('build files copy') {
   steps {
    sh 'cp nginx/status.conf dist/nginx-cfg'
  }
 } 
  
    
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.selector("bc", "angular-5-april").startBuild("--from-dir=dist", "--wait")
          }
        }
      }
    }
   
   
    stage('Create DEV') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
        def app = openshift.newApp("image-registry.openshift-image-registry.svc:5000/digitalrig/angular-5-april","--name=angular-5-april-deployment")
        def dc = app.narrow('dc')
        def dcmap = dc.object()
        dcmap.remove('status')
        dcmap.metadata.remove('annotations')
        dcmap.metadata.remove('labels')
        dcmap.metadata.remove('creationTimestamp')
        dcmap.metadata.remove('generation')
        dcmap.metadata.remove('resourceVersion')
        dcmap.metadata.remove('selfLink')
        dcmap.metadata.remove('uid')
        dcmap.spec.remove('replicas')
        dcmap.spec.remove('revisionHistoryLimit')
        dcmap.spec.remove('selector')
        dcmap.spec.remove('strategy')
        dcmap.spec.remove('test')
        dcmap.spec.remove('triggers')
        dcmap.spec.template.spec.containers[0].ports[0].name = "jolokia"
        echo "${dcmap}"
        
        openshift.apply(dcmap)
        
    }
          }
        }
      }
    }
  
}
}
